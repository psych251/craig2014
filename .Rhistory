pivot_longer(`1999`:`2000`, names_to = "year", values_to = "rate")
?pivot_longer
?pivot_longer
?tidyr_tidy_select {tidyr}
#?tidyr_tidy_select
#?tidyr_tidy_select
?tidyr_tidy_select
majic <- read_csv("data/majic.csv")
majic_long <- majic |>
pivot_longer(`2015`:`2016`, names_to = "year")
majic_long
...
majic_long <- majic |>
pivot_longer(`2015`:`2016`, names_to = "year")
majic_long
majic_long <- majic |>
pivot_longer(`2015`:`2016`, names_to = "year", values_to = "value")
majic_long
majic_long <- majic |>
pivot_longer(`2015`:`2016`, names_to = "year", values_to = "value", "group", "grade")
majic_long <- majic |>
pivot_longer(`2015`:`2016`, names_to = "year", values_to = "value")
majic_long
majic_long <- majic |>
pivot_longer(`2015`:`2016`, names_to = "year", values_to = "score")
majic_long
majic <- read_csv("data/majic.csv")
# Wide data sets are good for correlations but not datasets
majic
knitr::opts_chunk$set(echo = TRUE)
# Install devtools package if necessary
if(!"devtools" %in% rownames(installed.packages()))
install.packages("devtools")
# Install papaja
devtools::install_github("crsh/papaja")
library("papaja")
r_refs("r-references.bib")
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
There are `r 2^10` balloons at the party.
knitr::opts_chunk$set(echo = TRUE)
x <- round(t.test(mtcars$mpg)$p.value, 4)
The p value is `r x` thanks.
library(htmltools)
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
install.packages("htmltools")
install.packages("htmltools")
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
?unique
x <- c(3:5, 11:8, 8 + 0:5)
(ux <- unique(x))
(u2 <- unique(x, fromLast = TRUE)) # different order
stopifnot(identical(sort(ux), sort(u2)))
unique(iris)
unique("iris")
unique("iris", "dog", "i", "iris")
c?
?c
?unique
x <- c(3:5, 11:8, 8 + 0:5)
x
(ux <- unique(x))
(u2 <- unique(x, fromLast = TRUE)) # different order
stopifnot(identical(sort(ux), sort(u2)))
length(unique(sample(100, 100, replace = TRUE)))
## approximately 100(1 - 1/e) = 63.21
?range
?hist
hist(d)
?unique
## your code here
d |>
unique(`Game1Angry1`:`HowPlesantNeutral3)
## your code here
d |>
unique(`Game1Angry1`:`HowPlesantNeutral3`)
## your code here
unique(`d$Game1Angry1`:`d$HowPlesantNeutral3`)
## your code here
unique(`d$Game1Angry1`)
## your code here
unique(d$Game1Angry1)
## your code here
d |>
unique(Game1Angry1:HowPlesantNeutral3)
## your code here
d |>
unique(Game1Angry1)
## your code here
unique(d$Game1Angry1:d$HowPlesantNeutral3)
?filter
?range
## your code here
range(d)
## your code here
range(d$Game1Angry1:d$HowPleasantNeutral3)
## your code here
range(d$Game1Angry1)
## your code here
unique(d$Game1Angry1)
## your code here
unique(d$HowPleasantNeutral3)
## your code here
unique(d$HowPleasantNeutral3:d$Game1Angry1)
## your code here
unique(d$Game1Angry1:d$HowPleasantNeutral3)
?unique
## your code here
##unique(d$Game1Angry1:d$HowPleasantNeutral3)
likertVariables <- c(d$Game1Angry1:d$HowPleasantNeutral3)
## your code here
##unique(d$Game1Angry1:d$HowPleasantNeutral3)
likertVariables <- c(d$Game1Angry1:d$HowPleasantNeutral3)
likertVariables
d$Game1Angry1
?filter
## your code here
filter(d$Game1Angry1:d$HowPleasantNeutral3)
## your code here
d |>
unique(Game1Angry)
## your code here
d |>
unique(Game1Angry1)
## your code here
d |>
unique('Game1Angry1')
## your code here
d |>
unique(`Game1Angry1`)
## your code here
d[,`Game1Angry1`]
## your code here
d[,'Game1Angry1']
## your code here
d[,'Game1Angry1':'HowPleasantNeutral3']
## your code here
y <- d[,'Game1Angry1':'HowPleasantNeutral3']
## your code here
y <- d[,'Game1Angry1']
## your code here
y <- d[,'Game1Angry1':'Game1Angry2']
## your code here
y <- y + d[,'Game1Angry2']
## your code here
unique(d$Game1Angry1)
tail(d)
DoNotUse
DoNotUse
Game1Angry1
d$DoNotUse
filter
?filter
filtered_d = d %>%
filter(DoNotUse != 1) # your code here: exclude subjects that are marked as "DoNotUse"
View(filtered_d)
filtered_d = d %>%
filter(DoNotUse = 1) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(DoNotUse == 1) # your code here: exclude subjects that are marked as "DoNotUse"
View(filtered_d)
is.na(c(1, NA))
is.na(paste(c(1, NA)))
filtered_d = d %>%
filter(is.na(DoNotUse)) # your code here: exclude subjects that are marked as "DoNotUse"
View(filtered_d)
filtered_d = d %>%
filter(DoNotUse.is.na())  # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(is.na(DoNotUse))  # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
?select
select(d$Game1Angry1:d$HowPleasantNeutral3)
select("d$Game1Angry1":"d$HowPleasantNeutral3")
select(c("d$Game1Angry1":"d$HowPleasantNeutral3"))
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
columns(d)
colnames(d)
colnames(filtered_d)
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
colnames(rating_hyp_d)
performance_hyp_d = filtered_d %>%
select(-starts_with("Game") ) # your code here: remove the columns containing "Game" in the name
colnames(performance_hyp_d)
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
View(tiny_demo_d)
tiny_demo_d
tiny_demo_d %>% pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
knit_with_parameters("~/Experimental Methods/problem_sets/ps2.Rmd")
### Data Preparation
"Ill be importing data via qualtRics package functionality, and cleaning it here."
#### Load Relevant Libraries and Functions
######Copied from Julies session, dont want to run yet
# install.packages("qualtRics") # comment this out once youve installed
# library(qualtRics)
# library(tidyverse)
#### Import data
#qualtricsData <- fetch_survey(surveyID = "SURVEY ID HERE", force_request = T)
## Save Data to computer
#write_csv(qualtricsData, "./data/qualtricsData.csv")
#### Data exclusion / filtering
#### Prepare data for analysis - create columns etc.
library(foreign)
SPSSdata <- read.spss(file.choose(), to.data.frame = T)
View(SPSSdata)
#install.packages("foreign")
library(foreign)
SPSSdata <- read.spss(file.choose(), to.data.frame = T)
warnings()
View(SPSSdata)
write_csv(qualtricsData, "./data/qualtricsData.csv")
### Data Preparation
"Ill be importing data via qualtRics package functionality, and cleaning it here."
#### Load Relevant Libraries and Functions
#install.packages("qualtRics") # comment this out once youve installed
library(qualtRics)
library(tidyverse)
#### Authenticate API
#qualtrics_api_credentials(api_key = "*Removed because MYOB*", base_url = "stanforduniversity.ca1.qualtrics.com", install = T)
#### Import data
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T)
## Save Data to computer
write_csv(qualtricsData, "./data/qualtricsData.csv")
### Data Preparation
"Ill be importing data via qualtRics package functionality, and cleaning it here."
#### Load Relevant Libraries and Functions
#install.packages("qualtRics") # comment this out once youve installed
library(qualtRics)
library(tidyverse)
#### Authenticate API
#qualtrics_api_credentials(api_key = "*Removed because MYOB*", base_url = "stanforduniversity.ca1.qualtrics.com", install = T)
#### Import data
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T)
## Save Data to computer
write_csv(qualtricsData, "./data/qualtricsData.csv")
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T)
## Save Data to computer
write_csv(qualtricsData, "./newData/qualtricsData.csv")
### Data Preparation
"Ill be importing data via qualtRics package functionality, and cleaning it here."
#### Load Relevant Libraries and Functions
#install.packages("qualtRics") # comment this out once youve installed
library(qualtRics)
library(tidyverse)
#### Authenticate API
#qualtrics_api_credentials(api_key = "*Removed because MYOB*", base_url = "stanforduniversity.ca1.qualtrics.com", install = T)
#### Import data
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T)
### Data Preparation
"Ill be importing data via qualtRics package functionality, and cleaning it here."
#### Load Relevant Libraries and Functions
#install.packages("qualtRics") # comment this out once youve installed
library(qualtRics)
library(tidyverse)
#### Authenticate API
#qualtrics_api_credentials(api_key = "*Removed because MYOB*", base_url = "stanforduniversity.ca1.qualtrics.com", install = T)
#### Import data
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T)
rlang::last_error()
rlang::last_trace()
### Data Preparation
"Ill be importing data via qualtRics package functionality, and cleaning it here."
#### Load Relevant Libraries and Functions
#install.packages("qualtRics") # comment this out once youve installed
library(qualtRics)
library(tidyverse)
#### Authenticate API
#qualtrics_api_credentials(api_key = "*Removed because MYOB*", base_url = "stanforduniversity.ca1.qualtrics.com", install = T)
#### Import data
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T)
### Data Preparation
"Ill be importing data via qualtRics package functionality, and cleaning it here."
#### Load Relevant Libraries and Functions
#install.packages("qualtRics") # comment this out once youve installed
library(qualtRics)
library(tidyverse)
#### Authenticate API
#qualtrics_api_credentials(api_key = "*Removed because MYOB*", base_url = "stanforduniversity.ca1.qualtrics.com", install = T)
#### Import data
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T)
### Data Preparation
"Ill be importing data via qualtRics package functionality, and cleaning it here."
#### Load Relevant Libraries and Functions
#install.packages("qualtRics") # comment this out once youve installed
library(qualtRics)
library(tidyverse)
#### Authenticate API
#qualtrics_api_credentials(api_key = "*Removed because MYOB*", base_url = "stanforduniversity.ca1.qualtrics.com", install = T)
#### Import data
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T)
### Data Preparation
"Ill be importing data via qualtRics package functionality, and cleaning it here."
#### Load Relevant Libraries and Functions
#install.packages("qualtRics") # comment this out once youve installed
library(qualtRics)
library(tidyverse)
#### Authenticate API
#qualtrics_api_credentials(api_key = "*Removed because MYOB*", base_url = "stanforduniversity.ca1.qualtrics.com", install = T)
#### Import data
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T)
?write_csv
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T, lazy = F)
View(Research_Project_Data)
View(Mode)
### Data Preparation
"Ill be importing data via qualtRics package functionality, and cleaning it here."
#### Load Relevant Libraries and Functions
#install.packages("qualtRics") # comment this out once youve installed
library(qualtRics)
library(tidyverse)
#### Authenticate API
#qualtrics_api_credentials(api_key = "*Removed because MYOB*", base_url = "stanforduniversity.ca1.qualtrics.com", install = T)
#### Import data
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T)
## Save Data to computer
write_csv(qualtricsData, "./newData/qualtricsData.csv")
library(tidyverse)
p <- ggplot(diamonds, aes(x=carat, y=price)) # first you set the aesthetic and dataset
p <- p + geom_point()
p <- ggplot(diamonds, aes(x=carat, y=price)) # first you set the aesthetic and dataset
p <- p + geom_point()
p <- ggplot(diamonds, aes(x=carat, y=price))
p
p <- p + geom_point()
p
me <- ggplot(diamonds,
aes(x = carat, y = price)) +
geom_point(aes(color = carat))
me <- ggplot(diamonds,
aes(x = carat, y = price)) +
geom_point(aes(color = carat))
me
me <- ggplot(diamonds,
aes(x = carat, y = price)) +
geom_point(aes(colour = carat))
me
# Example given, but i recreated, no look, above
# ggplot(diamonds,
#        aes(x = carat, y = price)) +
#   geom_point(aes(colour = carat))
me <- ggplot(diamonds,
aes(x = carat, y = price)) +
geom_point(aes(color = carat))
me
# Example given, but i recreated, no look, above
# ggplot(diamonds,
#        aes(x = carat, y = price)) +
#   geom_point(aes(colour = carat))
ggplot(diamonds,
aes(x = carat, y = price)) +
geom_point(aes(color = clarity)) +
facet_grid(carat ~ price)
ggplot(diamonds,
aes(x = carat, y = price)) +
geom_point(aes(color = clarity)) +
facet_grid(cut ~ color)
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point() +
facet_wrap(~cut)
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point(alpha = .1) +
facet_wrap(~cut)
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point(alpha = .5) +
facet_wrap(~cut)
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point() +
facet_wrap(~cut)
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point(alpha = .5) +
facet_wrap(~cut)
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point(pch = "." ) +
facet_wrap(~cut)
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point(alpha = .5, pch = "." ) +
facet_wrap(~cut)
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point(alpha = 2, pch = "." ) +
facet_wrap(~cut)
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point(alpha = 2) +
facet_wrap(~cut)
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point(alpha = .25) +
facet_wrap(~cut)
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point(alpha = .25) +
facet_wrap(~cut)
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point(alpha = .25) +
facet_wrap(~cut) +
theme_minimal()
ggplot(diamonds, aes(x = carat, y = price,
col = clarity)) +
geom_point() +
facet_wrap(~cut) +
theme_minimal()
library(qualtRics)
library(tidyverse)
qualtricsData2 <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T, label = TRUE, convert = TRUE)
View(qualtricsData2)
qualtricsData2 <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T, label = FALSE, convert = TRUE)
qualtricsData2 <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T, label = FALSE, convert = FALSE)
library(foreign)
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
library(car) #to check Homogeneity of Variances & run ANCOVA model
library(multcomp) #to see if/how groups are different from each other
#### Import data
qualtricsData2 <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T, label = FALSE, convert = FALSE)
## Save Data to computer
write_csv(qualtricsData, "./newData/qualtricsData.csv")
View(qualtricsData2)
library(foreign)
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
library(car) #to check Homogeneity of Variances & run ANCOVA model
library(multcomp) #to see if/how groups are different from each other
#### Import data
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T, label = FALSE, convert = FALSE)
library(foreign)
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
library(qualtRics)
library(car) #to check Homogeneity of Variances & run ANCOVA model
library(multcomp) #to see if/how groups are different from each other
#### Import data
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T, label = FALSE, convert = FALSE)
## Save Data to computer
write_csv(qualtricsData, "./newData/qualtricsData.csv")
## Save Data to computer
write.csv(qualtricsData, "./newData/qualtricsData.csv")
## Save Data to computer
write.csv(qualtricsData, "./newData/qualtricsData.csv")
## Save Data to computer
write.csv(qualtricsData, "./newData/qualtricsData.csv")
## Save Data to computer
write.csv(qualtricsData, "./newData/qualtricsData.csv")
setwd("~/Experimental Methods/replication project/craig2014")
## Save Data to computer
write.csv(qualtricsData, "./newData/qualtricsData.csv")
## Save Data to computer
write.csv(qualtricsData, ".\newData\qualtricsData.csv")
## Save Data to computer
write.csv(qualtricsData, "C:\Users\staci\Documents\Experimental Methods\replication project\craig2014\newData\qualtricsData")
## Save Data to computer
write.csv(qualtricsData, "C:/Users/staci/Documents/Experimental Methods/replication project/craig2014/newData/qualtricsData")
View(qualtricsData)
# Look at Data
head(qualtricsData)
# Look at Data
head(qualtricsData)
# Look at Data
head(qualtricsData)
# Look at Data
head(qualtricsData)
View(qualtricsData)
?fetch_survey
#### Import data
qualtricsData <- fetch_survey(surveyID = "SV_bdaehc8gdxxRGJ0", force_request = T, label = FALSE, convert = FALSE, start_date = "2021-11-11" )
